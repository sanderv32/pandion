/**
*  This file is part of Pandion.
* 
*  Pandion is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
* 
*  Pandion is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
* 
*  You should have received a copy of the GNU General Public License
*  along with Pandion.  If not, see <http://www.gnu.org/licenses/>.
* 
*  Filename:    Pandion.idl
*  Author(s):   Dries Staelens
*  Copyright:   Copyright (c) 2009 Dries Staelens
*  Description: TODOTODOTODO
*/

[uuid(27F47850-0AE6-45c0-B4BB-1682FABCF9F7)]
library PandionLib
{
	[uuid(23E2FD3B-1FFF-418a-AF95-27DB011EC280)]
	interface IExternal : IDispatch
	{
		[propget] HRESULT wnd([out, retval] VARIANT* pDisp);
		[propget] HRESULT mainWnd([out, retval] VARIANT* pDisp);
		[propget] HRESULT windows([out, retval] VARIANT* pDisp);
		[propget] HRESULT globals([out, retval] VARIANT* pDisp);
		[propget] HRESULT ComCtrl([out, retval] VARIANT* pDisp);
		[propget] HRESULT cursorX([out, retval] VARIANT* retVal);
		[propget] HRESULT cursorY([out, retval] VARIANT* retVal);
		[propget] HRESULT newPopupMenu([out, retval] VARIANT* pDisp);
		[propget] HRESULT notifyIcon([out, retval] VARIANT* pDisp);
		[propget] HRESULT HTTPEngine([out, retval] VARIANT* pDisp);
		[propget] HRESULT SASL([out, retval] VARIANT* pDisp);
		[propget] HRESULT IPs([out,retval] VARIANT* pStr);
		[propget] HRESULT CmdLine([out,retval] VARIANT* pStr);
		[propget] HRESULT Directory([out,retval] VARIANT* pDisp);
		[propget] HRESULT XMPP([out,retval] VARIANT* pDisp);
		[propget] HRESULT Shortcut([out,retval] VARIANT* pDisp);
		HRESULT createWindow(
			[in] BSTR name, 
			[in] BSTR file, 
			[in] VARIANT* params, 
			[in, defaultvalue(FALSE)] BOOL popup, 
			[out, retval] VARIANT* pDisp);
		HRESULT shellExec(
			[in] BSTR verb, 
			[in] BSTR file, 
			[in] BSTR params, 
			[in] BSTR dir, 
			[in] DWORD nShowCmd);
		HRESULT sleep(
			[in] DWORD dwMilliseconds);
		HRESULT File(
			[in] BSTR path, 
			[out,retval] VARIANT* pDisp);
		HRESULT FileExists(
			[in] BSTR path, 
			[out,retval] BOOL* bExists);
		HRESULT StringToSHA1(
			[in] BSTR str, 
			[out,retval] BSTR* strSHA1);
		HRESULT GetSpecialFolder(
			[in] int nFolder, 
			[out,retval] BSTR* Path);
		HRESULT RegRead(
			[in] BSTR strHKey, 
			[in] BSTR strKey, 
			[in] BSTR value, 
			[out,retval] VARIANT* vRetVal);
		HRESULT RegWriteString(
			[in] BSTR hKey, 
			[in] BSTR key, 
			[in] BSTR value, 
			[in] BSTR data);
		HRESULT RegWriteDWORD(
			[in] BSTR hKey, 
			[in] BSTR key, 
			[in] BSTR value, 
			[in] DWORD data);
		HRESULT RegDeleteKey(
			[in] BSTR hKey,
			[in] BSTR key);
		HRESULT RegDeleteValue(
			[in] BSTR hKey,
			[in] BSTR key,
			[in] BSTR value);
		HRESULT UnZip(
			[in] BSTR path, 
			[in] BSTR targetDir, 
			[out,retval] int* nSuccess);
		HRESULT Base64ToString(
			[in] BSTR b64String, 
			[out,retval] BSTR* UTF16String);
		HRESULT StringToBase64(
			[in] BSTR UTF16String, 
			[out,retval] BSTR* b64String);
		HRESULT Fullscreen(
			[out,retval] BOOL* bFullscreen);
		HRESULT PlaySound(
			[in] BSTR soundFile);
		HRESULT InstallMSIESearchProvider(
			[in] BSTR url,
			[out,retval] BSTR* serviceID);
		HRESULT SetDefaultMSIESearchProvider(
			[in] BSTR serviceID);
		HRESULT IsProcessRunning(
			[in] BSTR processName,
			[out,retval] BOOL* isRunning);
		HRESULT IsRectOnMonitor(
			[in] DWORD top,
			[in] DWORD right,
			[in] DWORD bottom,
			[in] DWORD left,
			[out,retval] BOOL* onMonitor);
	}
	[uuid(A2691BAF-EEFE-4e1a-BD58-30D3DE8F85FF)]
	interface IPdnFile : IDispatch
	{
		HRESULT Create(
			[in] BSTR strFileName, 
			[in] unsigned dwAccess, 
			[in] unsigned dwShare, 
			[in] unsigned dwDisposition);

		HRESULT Seek(
			[in] int fpLow, 
			[in] int fpHigh, 
			[in] unsigned dwMethod);
		HRESULT SetEOF();

		HRESULT Read([in] unsigned nRead, [out,retval] BYTE* pBuffer);
		HRESULT Write([in] BYTE* pBuffer, [in] unsigned nWrite);

		HRESULT ReadLine([out,retval] BSTR* strLine);
		HRESULT WriteLine([in] BSTR strLine);

		HRESULT ReadBase64([out,retval] BSTR* strBase64);
		HRESULT WriteBase64([in] BSTR strBase64);

		HRESULT Move([in] BSTR strTo);
		HRESULT Copy([in] BSTR strTo, 
			[in,defaultvalue(FALSE)] bool bOverWrite, 
			[out,retval] IPdnFile** retCopy);
		HRESULT Delete();
		HRESULT Flush();
		HRESULT Close();

		[propget] HRESULT AtEnd([out,retval] bool* bAtEnd);
		[propget] HRESULT Size([out,retval] DWORD* nSize);
		[propget] HRESULT FileName([out,retval] BSTR* strFileName);
		[propget] HRESULT SHA1([out,retval] BSTR* strSHA1);
		[propget] HRESULT LastWriteTime([out,retval] VARIANT* vLastWriteTime);
	}
	[uuid(5173F9CB-79AD-4ee3-AD7B-C48C6FD3B23A)]
	interface IPdnDirectory : IDispatch
	{
		HRESULT Create([in] BSTR path);
		HRESULT Exists([in] BSTR path, [out,retval] bool* bExists);
		HRESULT ListDirs([in] BSTR path, [out,retval] VARIANT* list);
		HRESULT ListFiles([in] BSTR path, [out,retval] VARIANT* list);
		HRESULT Delete([in] BSTR path);
	}
	[uuid(1EC2886F-99F0-4553-BEAD-D75962B66286)]
	interface IListEntry : IDispatch
	{
		[propget] HRESULT IsArchive([out,retval] BOOL* b);
		[propget] HRESULT IsCompressed([out,retval] BOOL* b);
		[propget] HRESULT IsDirectory([out,retval] BOOL* b);
		[propget] HRESULT IsEncrypted([out,retval] BOOL* b);
		[propget] HRESULT IsHidden([out,retval] BOOL* b);
		[propget] HRESULT IsNormal([out,retval] BOOL* b);
		[propget] HRESULT IsOffline([out,retval] BOOL* b);
		[propget] HRESULT IsReadOnly([out,retval] BOOL* b);
		[propget] HRESULT HasReparsePoint([out,retval] BOOL* b);
		[propget] HRESULT IsSparseFile([out,retval] BOOL* b);
		[propget] HRESULT IsSystem([out,retval] BOOL* b);
		[propget] HRESULT IsTemporary([out,retval] BOOL* b);

		[propget] HRESULT CreationTime([out,retval] VARIANT* vCreationTime);
		[propget] HRESULT LastAccessTime([out,retval] VARIANT* vLastAccessTime);
		[propget] HRESULT LastWriteTime([out,retval] VARIANT* vLastWriteTime);

		[propget] HRESULT FileSizeHigh([out,retval] DWORD* dw);
		[propget] HRESULT FileSizeLow([out,retval] DWORD* dw);

		[propget] HRESULT ReparseTag([out,retval] DWORD* dw);
		[propget] HRESULT Reserved1([out,retval] DWORD* dw);
	
		[propget] HRESULT Name([out,retval] BSTR* str);
		[propget] HRESULT AlternateName([out,retval] BSTR* str);
	}
	[uuid(118D2F04-B9EA-4b1d-A04D-E58500C56D61)]
	interface IPdnWnd : IDispatch
	{
		HRESULT setTitle([in] BSTR Title);
		HRESULT setAOT([in] BOOL b);
		HRESULT minimize();
		HRESULT maximize();
		HRESULT close();
		HRESULT setSize([in] DWORD width, [in] DWORD height);
		HRESULT setPos([in] int left, [in] int top);
		HRESULT setIcon([in] BSTR IconPath);
		HRESULT hide([in] BOOL b);
		HRESULT rightToLeft([in] BOOL b);
		HRESULT flash([in] DWORD u);
		HRESULT desktopAlert([in] BSTR from, [in] BSTR mess, [in] DWORD timeout);
		HRESULT resizeable([in] BOOL b);
		HRESULT showMinBox([in] BOOL b);
		HRESULT showMaxBox([in] BOOL b);
		HRESULT showTitlebar([in] BOOL b);
		HRESULT translucent([in] DWORD percent);
		HRESULT animate([in] DWORD flags, [in] DWORD duration);
		HRESULT Do(
			[in] BSTR funcName, 
			[in] VARIANT* params, 
			[in,defaultvalue(1)] DWORD nParams);
		HRESULT focus();
		HRESULT isActive ([out,retval] BOOL*);
		HRESULT setMinHandler([in] BSTR);
		HRESULT setCloseHandler([in] BSTR);
		HRESULT setMenuHandler([in] BSTR);
		HRESULT setCmdLineHandler([in] BSTR);
		HRESULT setRestoreHandler([in] BSTR);
		HRESULT setActivationHandler([in] BSTR);
		HRESULT setWorkstationLockHandler([in] BSTR);
		HRESULT setWorkstationUnlockHandler([in] BSTR);
		HRESULT setScreenSaveHandler([in] BSTR);
		HRESULT restore();
		HRESULT FireEvent(
			[in] BSTR handler,
			[in] VARIANT* parameters,
			[in] DWORD nParams);
		HRESULT messageBox(
			[in] BOOL modal,
			[in] BSTR text,
			[in] BSTR caption,
			[in] DWORD type,
			[out,retval] DWORD* retval);
		[propget] HRESULT params([out, retval] VARIANT* retVal);
		[propget] HRESULT left([out, retval] VARIANT* retVal);
		[propget] HRESULT top([out, retval] VARIANT* retVal);
		[propget] HRESULT width([out, retval] VARIANT* retVal);
		[propget] HRESULT height([out, retval] VARIANT* retVal);
		[propput] HRESULT minWidth([in] DWORD minWidth);
		[propput] HRESULT minHeight([in] DWORD minHeight);
		[propget] HRESULT isMinimized([out,retval] BOOL*);
		[propget] HRESULT isMaximized([out,retval] BOOL*);
		[propget] HRESULT isHidden([out,retval] BOOL*);
		[propget] HRESULT menuBar([out,retval] VARIANT* pDisp);
		[propget] HRESULT Handle([out,retval] DWORD* pHandle);

		/* from DWebBrowserEvents2 */
		[id(250)]void BeforeNavigate2(
			[in] IDispatch *pDisp,
			[in] VARIANT *url,
			[in] VARIANT *Flags,
			[in] VARIANT *TargetFrameName,
			[in] VARIANT *PostData,
			[in] VARIANT *Headers,
			[in, out] VARIANT_BOOL *Cancel);
		[id(252)]void NavigateComplete2(
			[in] IDispatch *pDisp,
			[in] VARIANT *URL);
		[id(253)]void OnQuit();
		[id(263)]void WindowClosing(
			[in] VARIANT_BOOL IsChildWindow,
			[in, out] VARIANT_BOOL* Cancel);
	}
	[uuid(C1850B73-2AF0-49a3-B82F-4F4458D922AA)]
	interface INotifyIcon : IDispatch
	{
		HRESULT show();
		HRESULT remove();
		HRESULT setText([in] BSTR);
        HRESULT setIcon([in] BSTR, [in] int);
		HRESULT setHandler([in] BSTR);
		HRESULT update();
		HRESULT alert(BSTR From, BSTR Message, DWORD timeOut);
	}
	[uuid(9B9FC34D-98CB-4e4d-9D2C-686D023219DD)]
	interface IPopupMenu : IDispatch
	{
		HRESULT AddItem(
			[in] BOOL bEnabled,
			[in] BOOL bChecked,
			[in] BOOL bRadio,
			[in] BOOL bDefault,
			[in] DWORD hSubMenu,
			[in] BSTR label,
			[in] DWORD ID);
		HRESULT Show(
			[in] DWORD x,
			[in] DWORD y,
			[in] BOOL rightToLeft,
			[in, defaultvalue(FALSE)] BOOL fromTray);
		HRESULT Clear();
		HRESULT AddSeparator();

		[propget]HRESULT Handle([out, retval] VARIANT* pVal);
		[propget]HRESULT Choice([out, retval] VARIANT* pVal);
	}
	[uuid(9543DAE7-DB3D-4233-8F07-1AFC4FDEA1C7)]
	interface IMenuBar : IDispatch
	{
		HRESULT AddItem(
			[in] BSTR label,
			[in] DWORD pos,
			[in] DWORD ID,
			[in] IDispatch* subMenu);
		HRESULT RemItem([in] DWORD ID);
		HRESULT Update();

		[propget]HRESULT Items([out,retval] DWORD* nItems);
		[propget]HRESULT Handle([out,retval] VARIANT* pHandle);
		[propput]HRESULT hwnd([in] DWORD hwnd);
	}

	[uuid(889D15B7-E9D1-4f4a-AD75-6D0F4138887B)]
	interface IEventRouter : IDispatch
	{
		HRESULT Subscribe([in] IDispatch* wnd);
		HRESULT Unsubscribe([in] IDispatch* wnd);

		HRESULT OnListening([in] WORD Port);
		HRESULT OnAccept(
			[in] DWORD sessionID,
			[in] BSTR remHost,
			[in] USHORT remPort,
			[in] USHORT localPort);
		HRESULT OnConnected(
			[in] DWORD sessionID,
			[in] BSTR remHost,
			[in] USHORT remPort,
			[in] USHORT localPort);

		HRESULT OnGetRequest(
			[in] DWORD sessionID,
			[in] DWORD fileID,
			[in] BSTR URI,
			[in] BSTR localPath);
		HRESULT OnPostRequest(
			[in] DWORD sessionID,
			[in] BSTR URI,
			[out] BSTR* saveAs);

		HRESULT OnTimeout([in] DWORD sessionID);
		HRESULT OnSockErr([in] DWORD sessionID, [in] DWORD err);
		HRESULT OnHTTPErr([in] DWORD sessionID, [in] DWORD err);
		HRESULT OnFileErr([in] DWORD sessionID, [in] DWORD err);

		HRESULT OnTransferAborted(DWORD sessionID);
		HRESULT OnTransferComplete(DWORD sessionID);
	}
	[uuid(A123FE22-BDD7-40c3-BDEB-D6CD1709DE61)]
	interface IHTTP : IDispatch
	{
		HRESULT ShareFile(
			[in] BSTR filename,
			[in] BSTR URL,
			[out, retval] DWORD* retCookie);
		HRESULT UnShareFile(
			[in] DWORD fileCookie);
		
		HRESULT Listen([in] USHORT port);
		HRESULT StopListening([in] USHORT port);

		HRESULT Get(
			[in] BSTR filename,
			[in] BSTR URI,
			[in] DWORD offset,
			[in] DWORD len,
			[in] BSTR address,
			[in] USHORT port,
			[out, retval] DWORD* sessionID);
		HRESULT Post(
			[in] BSTR filename,
			[in] BSTR URI,
			[in] DWORD offset,
			[in] DWORD len,
			[in] BSTR address,
			[in] USHORT port,
			[out, retval] DWORD* sessionID);

		HRESULT GetProgress(
			[in] DWORD sessionID,
			[out,retval] DWORD* progress);
		HRESULT GetLength(
			[in] DWORD sessionID,
			[out,retval] DWORD* length);

		HRESULT Subscribe([in] IDispatch* wnd);
		HRESULT Unsubscribe([in] IDispatch* wnd);

		HRESULT Abort([in] DWORD sessionID);
	}
	[uuid(E9B8AA03-69C6-4ce6-96E9-1A3E38DF880C)]
	interface IXMPP : IDispatch
	{
		HRESULT SetProxySettings(
			[in] BSTR method,
			[in] BSTR server,
			[in] USHORT port,
			[in] BSTR username,
			[in] BSTR password,
			[in,defaultvalue(FALSE)] BOOL useSSL);
		HRESULT Connect(
			[in] BSTR server,
			[in] USHORT port,
			[in,defaultvalue(FALSE)] BOOL useSSL);
		HRESULT Disconnect();
		HRESULT StartTLS();
		HRESULT StartSC();
		HRESULT SendXML(
			[in] IDispatch* pDisp);
		HRESULT SendText(
			[in] BSTR strText);
		[propget] HRESULT ConnectionIP([out, retval] BSTR* connIP);
		[propget] HRESULT ConnectionFQDN([out, retval] BSTR* fqdn);
		[propput] HRESULT ConnectedHandler([in] BSTR handler);
		[propput] HRESULT DisconnectedHandler([in] BSTR handler);
		[propput] HRESULT IQHandler([in] BSTR handler);
		[propput] HRESULT MessageHandler([in] BSTR handler);
		[propput] HRESULT PresenceHandler([in] BSTR handler);
		[propput] HRESULT DocumentStartHandler([in] BSTR handler);
		[propput] HRESULT DocumentEndHandler([in] BSTR handler);
		[propput] HRESULT StreamHandler([in] BSTR handler);
		[propput] HRESULT StartTLSSucceededHandler([in] BSTR handler);
		[propput] HRESULT StartTLSFailedHandler([in] BSTR handler);
		[propput] HRESULT StartSCSucceededHandler([in] BSTR handler);
		[propput] HRESULT StartSCFailedHandler([in] BSTR handler);

		[propget] HRESULT ServerFQDN([out] LPBSTR serverFQDN);
	}
	[uuid(AE04DA67-F008-4365-A4E6-8A5094B2B774)]
	interface ISASL : IDispatch
	{
		HRESULT PlainGenerateResponse(
			[in] BSTR jid,
			[in] BSTR username,
			[in] BSTR password,
			[out,retval] BSTR* strBase64);
		HRESULT DigestGenerateResponse(
			[in] BSTR username,
			[in] BSTR realm,
			[in] BSTR password,
			[in] BSTR nonce,
			[in] BSTR cnonce,
			[in] BSTR digest_uri,
			[in] BSTR nc,
			[in] BSTR qop,
			[out,retval] BSTR* strDigest);
		[propget] HRESULT SCRAM([out, retval] VARIANT* pDispatch);
		[propget] HRESULT SSPI([out, retval] VARIANT* pDispatch);
		[propget] HRESULT GSSAPI([out, retval] VARIANT* pDispatch);
	}
	[uuid(D589A536-0A43-11DF-97E6-DDC756D89593)]
	interface ISCRAM : IDispatch
	{
		HRESULT Initialize(
			[in] BSTR ClientUsername,
			[in] BSTR ClientPassword);
		HRESULT GenerateClientFirstMessage(
			[out, retval] BSTR* ClientFirstMessage);
		HRESULT GenerateClientFinalMessage(
			[out, retval] BSTR* ClientFinalMessage);
		HRESULT ValidateServerFirstMessage(
			[in] BSTR ServerFirstMessage);
		HRESULT ValidateServerFinalMessage(
			[in] BSTR ServerFinalMessage);
	}
	[uuid(D4C00020-E57A-434e-9289-937C53CC07ED)]
	interface ISSPI : IDispatch
	{
		HRESULT Reset();
		HRESULT GenerateResponse(
			[in] BSTR Challenge,
			[out] BOOL* Continue,
			[out, retval] BSTR* Response);
	}
	[uuid(5FA5AC97-F9E0-4ea0-A1BD-2957A331FF47)]
	interface IGSSAPI : IDispatch
	{
		HRESULT Reset();
		HRESULT GenerateResponse(
			[in] BSTR ServerName,
			[in] BSTR Challenge,
			[out, retval] BSTR* Response);
		HRESULT GetLastErrorMessage(
			[out, retval] BSTR* ErrorMessage);
	}
	[uuid(3AA4A7CE-829F-4b24-BB86-D96A23084F51)]
	interface IShortcut : IDispatch
	{
		HRESULT Save([in] BSTR path);
		HRESULT Load([in] BSTR path);

		[propget] HRESULT Description([out,retval] BSTR* Description);
		[propget] HRESULT IconLocation([out,retval] BSTR* IconLocation);
		[propget] HRESULT Path([out,retval] BSTR* Path);
		[propget] HRESULT Arguments([out,retval] BSTR* Arguments);

		[propput] HRESULT Description([in] BSTR Description);
		[propput] HRESULT IconLocation([in] BSTR IconLocation);
		[propput] HRESULT Path([in] BSTR Path);
		[propput] HRESULT Arguments([in] BSTR Arguments);
	}
	[uuid(46602B9A-CA4F-488b-B2EE-C4A045159BAC)]
	interface IComCtrl : IDispatch
	{
		[propget] HRESULT ComDlg([out,retval] IDispatch** ppCComDlg);
	}
	[uuid(402544AD-D1D7-4148-AB1C-7DB0018D43F4)]
	interface IComDlg : IDispatch
	{
		[propget] HRESULT GetFileName(
			[out,retval] IDispatch* *ppGetOpenFileName);
		[propget] HRESULT ChooseFont(
			[out,retval] IDispatch* *ppChooseFont);
	}
	[uuid(0338850F-4536-4885-AE89-3974D54776D6)]
	interface IGetFileName : IDispatch
	{
		[propput] HRESULT Filter([in] BSTR strFilter);
		[propput] HRESULT FilterIndex([in] DWORD dwFilterIndex);
		[propget] HRESULT FilterIndex([out,retval] DWORD* dwFilterIndex);
		[propput] HRESULT FileName([in] BSTR strFileName);
		[propget] HRESULT FileName([out,retval] BSTR* strFileName);
		[propput] HRESULT InitDirectory([in] BSTR strInitDirectory);
		[propput] HRESULT Title([in] BSTR strTitle);
		[propput] HRESULT Flags([in] DWORD dwFlags);
		[propput] HRESULT DefExt([in] BSTR strDefExt);
		HRESULT DisplayOpen([out,retval] BSTR* strFileName);
		HRESULT DisplaySave([out,retval] BSTR* strFileName);
	}
	[uuid(0A4377A3-8FD8-41ae-B8ED-077EE160A209)]
	interface IChooseFont : IDispatch
	{
		[propget] HRESULT FontHeight([out,retval] LONG* lfHeight);
		[propput] HRESULT FontHeight([in] LONG lfHeight);
		[propget] HRESULT FontWidth([out,retval] LONG* lfWidth);
		[propput] HRESULT FontWidth([in] LONG lfWidth);
		[propget] HRESULT FontEscapement([out,retval] LONG* lfEscapement);
		[propput] HRESULT FontEscapement([in] LONG lfEscapement);
		[propget] HRESULT FontOrientation([out,retval] LONG* lfOrientation);
		[propput] HRESULT FontOrientation([in] LONG lfOrientation);
		[propget] HRESULT FontWeight([out,retval] LONG* lfWeight);
		[propput] HRESULT FontWeight([in] LONG lfWeight);
		[propget] HRESULT FontItalic([out,retval] BYTE* lfItalic);
		[propput] HRESULT FontItalic([in] BYTE lfItalic);
		[propget] HRESULT FontUnderline([out,retval] BYTE* lfUnderline);
		[propput] HRESULT FontUnderline([in] BYTE lfUnderline);
		[propget] HRESULT FontStrikeOut([out,retval] BYTE* lfStrikeOut);
		[propput] HRESULT FontStrikeOut([in] BYTE lfStrikeOut);
		[propget] HRESULT FontCharSet([out,retval] BYTE* lfCharSet);
		[propput] HRESULT FontCharSet([in] BYTE lfCharSet);
		[propget] HRESULT FontOutPrecision([out,retval] BYTE* lfOutPrecision);
		[propput] HRESULT FontOutPrecision([in] BYTE lfOutPrecision);
		[propget] HRESULT FontClipPrecision([out,retval] BYTE* lfClipPrecision);
		[propput] HRESULT FontClipPrecision([in] BYTE lfClipPrecision);
		[propget] HRESULT FontQuality([out,retval] BYTE* lfQuality);
		[propput] HRESULT FontQuality([in] BYTE lfQuality);
		[propget] HRESULT FontPitchAndFamily([out,retval] BYTE* lfPitchAndFamily);
		[propput] HRESULT FontPitchAndFamily([in] BYTE lfPitchAndFamily);
		[propget] HRESULT FontFace([out,retval] BSTR* lfFaceName);
		[propput] HRESULT FontFace([in] BSTR lfFaceName);
		[propget] HRESULT PointSize([out,retval] INT* iPointSize);
		[propput] HRESULT PointSize([in] INT iPointSize);
		[propput] HRESULT Flags([in] DWORD dwFlags);
		[propput] HRESULT Color([in] DWORD dwColor);
		[propget] HRESULT Color([out,retval] DWORD* dwColor);
		[propget] HRESULT FontType([out,retval] WORD* dwType);
		[propput] HRESULT SizeMin([in] INT iSizeMin);
		[propput] HRESULT SizeMax([in] INT iSizeMax);
		HRESULT Display();
	}
};
